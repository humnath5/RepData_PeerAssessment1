source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
data
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
odePSO()
makedata()
data
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
t
fun
K
y1
y2
source('~/Desktop/PSOProject/testOde.R')
BVProblem(1:6)
para<-1:6
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
z
t
fun
plot(t,fun)
plot(z,fun)
plot(t,fun,type="b")
x<-seq(0,1),length=100
x<-seq(0,1,length=100)
x
plot(x,6x^2-x)
plot(x,function(x)6x^2-x)
plot(x,function(x){6x^2-x})
y<-6x^2-x
y<- 6*x^2-x
plot(x,y)
y<-x^3-x
plot(x,y)
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
para
source('~/Desktop/PSOProject/test2Ode.R')
para1
para2
source('~/Desktop/PSOProject/test2Ode.R')
para2
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/test2Ode.R')
y1
y2
y1prime
y2prime
Yprime<-c(y1prime,y2prime)
Fun<-c(y2,fun)
#//:::::::::Objective function :::::::::::::::::::::::::::::#//
J<-(1/n.pts)*sum((Yprime-Fun)^2)
source('~/Desktop/PSOProject/test2Ode.R')
Yprime
Fun
fun
y2
J
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/testOde.R')
odePSO()
source('~/Desktop/PSOProject/testOde.R')
makdata()
source('~/Desktop/PSOProject/testOde.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
testPoints=100
x<-testPoints<-seq(LB,UB,(UB-LB)/(testpts-1))
UB=1; LB=0;
x<-testPoints<-seq(LB,UB,(UB-LB)/(testpts-1))
testpts=100
x<-testPoints<-seq(LB,UB,(UB-LB)/(testpts-1))
x
length(x)
source('~/Desktop/PSOProject/odePSO.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
val
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(100)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(100)
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP()
odeBVP(100)
odeBVP(5)
odeBVP(n.pts=5)
odeBVP(n.pts=5,iter=500)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=5,iter=500)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=5,iter=500)
odeBVP()
odeBVP(n.pts=4)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4)
odeBVP(n.pts=4,iter=500)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4,iter=500)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4,iter=500)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4,iter=500)
odeBVP(n.pts=6,iter=1000)
odeBVP(n.pts=50,iter=1000)
odeBVP(n.pts=10,iter=1000)
odeBVP(n.pts=10,iter=10000)
odeBVP(n.pts=10,iter=10000)
odeBVP(n.pts=20,iter=10000)
odeBVP(n.pts=20,iter=10000,part=5000)
odeBVP(n.pts=10,iter=10000,part=5000)
odeBVP(n.pts=5,iter=10000,part=5000)
odeBVP(n.pts=6,iter=10000,part=5000)
odeBVP(n.pts=4,iter=10000,part=5000)
odeBVP(n.pts=5,iter=10000,part=5000)
odeBVP(n.pts=7,iter=10000,part=5000)
odeBVP(n.pts=7,iter=100000,part=5000)
odeBVP(n.pts=7,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=7,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=7,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=7,iter=100000,part=5000)
fun
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=7,iter=100000,part=5000)
fun
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=7,iter=100000,part=5000)
odeBVP(n.pts=7,iter=100000,part=5000)
odeBVP(n.pts=3,iter=100000,part=5000)
odeBVP(n.pts=4,iter=100000,part=5000)
odeBVP(n.pts=5,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=5,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=5,iter=100000,part=5000)
odeBVP(n.pts=3,iter=100000,part=5000)
odeBVP(n.pts=4,iter=100000,part=5000)
odeBVP(n.pts=10,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=10,iter=100000,part=5000)
odeBVP(n.pts=3,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4,iter=100000,part=5000)
source('~/Desktop/PSOProject/test2Ode.R')
odeBVP(n.pts=4,iter=100000,part=5000)
odeBVP(n.pts=3,iter=100000,part=5000)
install.packages("rmarkdown")
library(xtable)
install.packages("xtable")
library(xtable)
?xtable
source('~/Desktop/PSOProject/test3Ode.R')
BVProblem(1:6)
BVProblem(1:6)
source('~/Desktop/PSOProject/test3Ode.R')
BVProblem(1:6)
guess=runif(6)
geuess
guess
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
guess =runif(6,-50,50)
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
guess
guess =runif(10,-50,50)
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
para =runif(6,-2,2)
BVProblem(para)
Fun
source('~/Desktop/PSOProject/test3Ode.R')
source('~/Desktop/PSOProject/test3Ode.R')
BVProblem(para)
source('~/Desktop/PSOProject/test3Ode.R')
BVProblem(para)
para <- c(0.00007,-0.5,-0.2,-0.4,-0.3,0.00002)
BVProblem(para)
para <- c(0.00007,-0.5,-0.2,-0.4,-0.3,0.00002)
para
n.pts = length(para)/2
LB =0
UB = 1
z <-cutPoints<-seq(LB,UB,(UB-LB)/(n.pts-1))
z
z <-cutPoints<-seq(LB,UB,(UB-LB)/(n.pts))
z
# mid points
t <-midPoints<-numeric(n.pts-1)
for (i in 1:(n.pts-1)){
t[i]<- (z[i]+z[i+1])/2
}
t
n.pts
n.pts = length(para)/2
z <-cutPoints<-seq(LB,UB,(UB-LB)/(n.pts-1))
z
# mid points
t <-midPoints<-numeric(n.pts-1)
for (i in 1:(n.pts-1)){
t[i]<- (z[i]+z[i+1])/2
}
t
source('~/Desktop/PSOProject/test3Ode.R')
fun<-6*t
fun
K=n.pts*400
K
para1<-para[1:n.pts]
para2<-para[(n.pts+1):(2*n.pts)]
para1
para2
y1<-numeric(length(t))
y2<-numeric(length(t))
y1prime<-numeric(length(t))
y2prime<-numeric(length(t))
for(i in 1:(n.pts-1)){
y1[i]<-(para1[i]+para1[i+1])/2
y2[i]<-(para2[i]+para2[i+1])/2
y1prime[i]<-(para1[i+1]-para1[i])/(z[i+1]-z[i])
y2prime[i]<-(para2[i+1]-para2[i])/(z[i+1]-z[i])
}
y1
y2
y1prime
y2prime
#combining in a whole vector system
Yprime<-c(y1prime,y2prime)
Fun<-c(y2,fun)
#Objective function by considering boundary condition
J<-(1/n.pts)*sum((Yprime-Fun)^2)+ K*(para1[1]^2+para1[n.pts]^2)
return(J)
Yprime
Fun
J
source('~/Desktop/PSOProject/test3Ode.R')
source('~/Desktop/PSOProject/test3Ode.R')
source('~/Desktop/PSOProject/test3Ode.R')
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
guess=ruinf(6,-50,50)
guess=runif(6,-50,50)
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
pwlin = function(t, coef, LB = 0, UB = 1) {
n = length(coef)
z = seq(LB, UB, (UB-LB)/(n-1))
if(t <= z[1])
return(coef[1])
if(t >= z[n]){
return(coef[n])}
else{
for(i in 2:n)
if(z[i]> t)
return( (coef[i-1]*(z[i]-t)+ coef[i]*(t-z[i-1]))/(z[i]-z[i-1]))}
}
coef =c(2,3,5,6,7,9)
t=seq(0,1,100)
t
t=seq(0,1,1/100)
t
pwlin(t,coef)
pwlin = function(t, coef, LB = 0, UB = 1) {
n = length(coef)
z = seq(LB, UB, (UB-LB)/(n-1))
if(t <= z[1])
return(coef[1])
if(t >= z[n]){
return(coef[n])}
else{
for(i in 2:n)
if(z[i]> t)
return( (coef[i-1]*(z[i]-t)+ coef[i]*(t-z[i-1]))/(z[i]-z[i-1]))}
}
coef=c(0.0007,0.3,0.0002)
coef
t
length(t)
t=seq(0,1,1/99)
t
pwlin(t,coef)
source('~/Desktop/PSOProject/test4Ode.R')
source('~/Desktop/PSOProject/test4Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test4Ode.R')
odeBVP()
source('~/Desktop/PSOProject/test4Ode.R')
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
odeBVP()
para=runif(6)
LB =0
UB = 1
n.pts = length(para)/2
z <-cutPoints<-seq(LB,UB,(UB-LB)/(n.pts-1))
z
t <-midPoints<-numeric(n.pts-1)
for (i in 1:(n.pts-1)){
}}
# mid points
t <-midPoints<-numeric(n.pts-1)
for (i in 1:(n.pts-1)){
t[i]<- (z[i]+z[i+1])/2
}
t
fun<-6*t
#parmeters for linear splines approximation (1)and(2)
para1<-para[1:n.pts]
para2<-para[(n.pts+1):(2*n.pts)]
#creating linear splines and derivatives approximation explicitely
y1<-numeric(length(t))
y2<-numeric(length(t))
y1prime<-numeric(length(t))
y2prime<-numeric(length(t))
for(i in 1:(n.pts-1)){
y1[i]<-(para1[i]+para1[i+1])/2
y2[i]<-(para2[i]+para2[i+1])/2
y1prime[i]<-(para1[i+1]-para1[i])/(z[i+1]-z[i])
y2prime[i]<-(para2[i+1]-para2[i])/(z[i+1]-z[i])
}
#combining in a whole vector system
Yprime<-c(y1prime,y2prime)
Fun<-c(y2,fun)
#Objective function by considering boundary condition
J<-(1/n.pts)*sum((Yprime-Fun)^2)+ K*(para1[1]^2+para1[n.pts]^2)
return(J)
K=n.pts*400
#parmeters for linear splines approximation (1)and(2)
para1<-para[1:n.pts]
para2<-para[(n.pts+1):(2*n.pts)]
#creating linear splines and derivatives approximation explicitely
y1<-numeric(length(t))
y2<-numeric(length(t))
y1prime<-numeric(length(t))
y2prime<-numeric(length(t))
for(i in 1:(n.pts-1)){
y1[i]<-(para1[i]+para1[i+1])/2
y2[i]<-(para2[i]+para2[i+1])/2
y1prime[i]<-(para1[i+1]-para1[i])/(z[i+1]-z[i])
y2prime[i]<-(para2[i+1]-para2[i])/(z[i+1]-z[i])
}
#combining in a whole vector system
Yprime<-c(y1prime,y2prime)
Fun<-c(y2,fun)
#Objective function by considering boundary condition
J<-(1/n.pts)*sum((Yprime-Fun)^2)+ K*(para1[1]^2+para1[n.pts]^2)
J
source('~/Desktop/PSOProject/test3Ode.R')
guess=runif(6,-1,0)
guess
odeBVP(guess)
odeBVP(guess)
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess=runif(10,-1,0),lb=rep(-50,10),up=rep(50,6))
odeBVP(guess=runif(10,-1,0),lb=rep(-50,10),up=rep(50,10))
odeBVP(guess=runif(10,-1,0),lb=rep(-50,10),ub=rep(50,10))
guess=runif(10,-1,0)
guess
odeBVP(guess,lb=rep(-50,10),ub=rep(50,10))
guess=runif(6,-1,0)
odeBVP(guess)
guess=runif(10,-1,0)
odeBVP(guess,lb=rep(-5,10),ub=rep(5,10))
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
length(guess)
rel_step_size = 1./20
rel_step_size=1/20
rel_step_size
x[ ,1] = guess
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess)
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess=runif(100,-1,0),lb=rep(-50,100),ub=rep(50,100))
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess=runif(100,-1,0),lb=rep(-50,100),ub=rep(50,100))
source('~/Desktop/PSOProject/test3Ode.R')
odeBVP(guess=runif(100,-1,0),iter=1000,part=5000,lb=rep(-50,100),ub=rep(50,100))
source('~/Desktop/PSOProject/test4Ode.R')
lb=rep(-5,5)
ub=rep(5,5)
part=2
dimm=5
x = matrix(runif(part*dimm,min=0,max=1),ncol=part,nrow=dimm)
x
x=lb+(ub-lb)*x
x
ub-lb
a<-ub-lb
a
a*x
setwd("~/Desktop/Data Science/Reproducible Research/RepData_PeerAssessment1/RepData_PeerAssessment1")
source('~/Desktop/Data Science/Reproducible Research/RepData_PeerAssessment1/RepData_PeerAssessment1/PA1_assin.R')
setwd("~/Desktop/Data Science/Reproducible Research/RepData_PeerAssessment1/RepData_PeerAssessment1")
source('~/Desktop/Data Science/Reproducible Research/RepData_PeerAssessment1/RepData_PeerAssessment1/PA1_assin.R')
